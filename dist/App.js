import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	text
} from "../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let div1;
	let header;
	let h1;
	let t1;
	let div0;
	let p;
	let span;
	let t2;
	let t3;
	let t4;
	let input;
	let t5;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			header = element("header");
			h1 = element("h1");
			h1.textContent = "Countdown";
			t1 = space();
			div0 = element("div");
			p = element("p");
			span = element("span");
			t2 = space();
			t3 = text(/*msg*/ ctx[2]);
			t4 = space();
			input = element("input");
			t5 = space();
			button = element("button");
			button.textContent = "Copy\n\t\t\t\tPermalink";
			attr(span, "contenteditable", "");
			if (/*userMessage*/ ctx[1] === void 0) add_render_callback(() => /*span_input_handler*/ ctx[4].call(span));
			set_style(p, "font-size", "3em");
			attr(p, "class", "svelte-fquoqz");
			attr(input, "type", "date");
			attr(input, "id", "countdown");
			attr(input, "class", "svelte-fquoqz");
			attr(button, "class", "svelte-fquoqz");
			attr(header, "class", "App-header svelte-fquoqz");
			attr(div1, "class", "App svelte-fquoqz");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, header);
			append(header, h1);
			append(header, t1);
			append(header, div0);
			append(div0, p);
			append(p, span);

			if (/*userMessage*/ ctx[1] !== void 0) {
				span.innerHTML = /*userMessage*/ ctx[1];
			}

			append(p, t2);
			append(p, t3);
			append(div0, t4);
			append(div0, input);
			set_input_value(input, /*countdown*/ ctx[0]);
			append(div0, t5);
			append(div0, button);

			if (!mounted) {
				dispose = [
					listen(span, "input", /*span_input_handler*/ ctx[4]),
					listen(input, "input", /*input_input_handler*/ ctx[5]),
					listen(button, "click", /*click_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*userMessage*/ 2 && /*userMessage*/ ctx[1] !== span.innerHTML) {
				span.innerHTML = /*userMessage*/ ctx[1];
			}

			if (dirty & /*msg*/ 4) set_data(t3, /*msg*/ ctx[2]);

			if (dirty & /*countdown*/ 1) {
				set_input_value(input, /*countdown*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

let formattedTime = "";

function timeLeft(countDownDate) {
	const now = new Date().getTime();
	const timeleft = countDownDate - now;
	const days = Math.floor(timeleft / (1000 * 60 * 60 * 24));
	const hours = Math.floor(timeleft % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
	const minutes = Math.floor(timeleft % (1000 * 60 * 60) / (1000 * 60));
	const seconds = Math.floor(timeleft % (1000 * 60) / 1000);
	return { days, hours, minutes, seconds };
}

function parser(string, results) {
	"use strict";
	const result = (/((?:"[^"]+[^\\]")|(?:'[^']+[^\\]')|(?:[^=]+))\s*=\s*("(?:[\s\S]*?[^\\])"|'(?:[\s\S]*?[^\\])'|(?:.*?[^\\])|$)(?:;|$)(?:\s*(.*))?/m).exec(string);

	if (result && result[1]) {
		const key = result[1].trim().replace(/(^\s*["'])|(["']\s*$)/g, "");

		if (typeof result[2] === "string") {
			const val = result[2].replace(/(^\s*[\\]?["'])|([\\]?["']\s*$)/g, "");

			// const val = result[2];
			if ((/^[0-9-.,]+$/).test(val)) {
				results[key] = parseFloat(val);
			} else if (val === "") {
				results[key] = undefined;
			} else if (val.toLowerCase() === "true") {
				results[key] = true;
			} else if (val.toLowerCase() === "false") {
				results[key] = false;
			} else {
				results[key] = val;
			}
		} else {
			results[result[1].trim()] = undefined;
		}

		if (result[3] && result[3].length > 1) {
			parser(result[3], results);
		}
	}
}

function instance($$self, $$props, $$invalidate) {
	"use strict";
	const parsedHash = {};
	parser(window.location.hash.slice(1), parsedHash);
	console.log(parsedHash);

	let countdown = parsedHash.countdown
	? decodeURIComponent(parsedHash.countdown)
	: localStorage.getItem("lastDate") || "2021-12-31";

	let msg = "in";

	let userMessage = parsedHash.message
	? decodeURIComponent(parsedHash.message)
	: localStorage.getItem("userMessage") || "Countdown ends";

	msg = "in";
	const time = timeLeft(new Date(countdown).getTime());

	if (time.days > 0) {
		msg += ` ${time.days} days`;
	}

	if (time.hours > 0) {
		msg += ` ${time.hours} hours`;
	}

	if (time.minutes > 0) {
		msg += ` ${time.minutes} minutes`;
	}

	if (time.seconds > 0) {
		msg += ` ${time.seconds} seconds`;
	}

	setInterval(
		() => {
			$$invalidate(2, msg = "in");
			const time = timeLeft(new Date(countdown).getTime());

			if (time.days > 0) {
				$$invalidate(2, msg += ` ${time.days} days`);
			}

			if (time.hours > 0) {
				$$invalidate(2, msg += ` ${time.hours} hours`);
			}

			if (time.minutes > 0) {
				$$invalidate(2, msg += ` ${time.minutes} minutes`);
			}

			if (time.minutes > 0 && time.seconds > 0) {
				$$invalidate(2, msg += " and");
			}

			if (time.seconds > 0) {
				$$invalidate(2, msg += ` ${time.seconds} seconds`);
			}
		},
		1000
	);

	function getPermaLink() {
		const url = new URL(window.location.href);
		url.hash = `message=${encodeURIComponent(userMessage)};countdown=${encodeURIComponent(countdown)}`;
		return url.href;
	}

	function span_input_handler() {
		userMessage = this.innerHTML;
		$$invalidate(1, userMessage);
	}

	function input_input_handler() {
		countdown = this.value;
		$$invalidate(0, countdown);
	}

	const click_handler = () => navigator.clipboard.writeText(getPermaLink());

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*countdown, userMessage*/ 3) {
			$: {
				localStorage.setItem("lastDate", countdown);
				localStorage.setItem("userMessage", userMessage);
			}
		}
	};

	return [
		countdown,
		userMessage,
		msg,
		getPermaLink,
		span_input_handler,
		input_input_handler,
		click_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;